// backend/src/routes/multiCategory.routes.js
// Routes Express pour les analyses multi-cat√©gories ECOLOJIA

const express = require('express');
const router = express.Router();

// Mock data pour les cat√©gories
const categories = [
  {
    id: 'food',
    name: 'Alimentaire',
    description: 'Analyse nutritionnelle et d√©tection ultra-transformation des produits alimentaires selon NOVA et EFSA',
    icon: 'üçé',
    color: '#7DDE4A',
    features: [
      'Classification NOVA',
      'Index glyc√©mique',
      'Additifs dangereux',
      'Alternatives bio'
    ],
    available: true
  },
  {
    id: 'cosmetics',
    name: 'Cosm√©tiques',
    description: 'Analyse des ingr√©dients cosm√©tiques et d√©tection des perturbateurs endocriniens selon ANSM',
    icon: 'üíÑ',
    color: '#FF69B4',
    features: [
      'Ingr√©dients toxiques',
      'Certification bio',
      'Tests animaux',
      'Alternatives naturelles'
    ],
    available: true
  },
  {
    id: 'detergents',
    name: 'D√©tergents',
    description: 'Impact environnemental et sant√© des produits m√©nagers selon REACH et ECHA',
    icon: 'üßΩ',
    color: '#4FC3F7',
    features: [
      'Biod√©gradabilit√©',
      'Toxicit√© aquatique',
      '√âmissions COV',
      'Recettes DIY'
    ],
    available: true
  }
];

// ===============================
// GET /api/multi-category/categories
// ===============================
router.get('/categories', (req, res) => {
  try {
    console.log('üìã Demande liste cat√©gories multi-analyses');
    
    res.json({
      success: true,
      categories: categories,
      total_categories: categories.length,
      default_category: 'food',
      api_version: '1.0',
      timestamp: new Date().toISOString(),
      message: 'Cat√©gories multi-analyses ECOLOJIA disponibles'
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration cat√©gories:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur serveur lors de la r√©cup√©ration des cat√©gories',
      categories: []
    });
  }
});

// ===============================
// POST /api/multi-category/analyze
// ===============================
router.post('/analyze', (req, res) => {
  try {
    console.log('üß™ Demande analyse multi-cat√©gorie:', req.body);

    const { product, context = {} } = req.body;

    // Validation basique
    if (!product || !product.title) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es produit manquantes',
        message: 'Le champ product.title est requis'
      });
    }

    // D√©tection automatique de cat√©gorie bas√©e sur le titre/ingr√©dients
    const detectedCategory = detectProductCategory(product);
    
    // Simulation d'analyse selon la cat√©gorie
    const analysisResult = performMockAnalysis(product, detectedCategory);
    
    // G√©n√©ration d'alternatives basiques
    const alternatives = generateMockAlternatives(detectedCategory);

    console.log(`‚úÖ Analyse ${detectedCategory} termin√©e pour: ${product.title}`);

    res.json({
      success: true,
      category: detectedCategory,
      detection_confidence: analysisResult.detection_confidence,
      analysis: {
        overall_score: analysisResult.overall_score,
        confidence: analysisResult.confidence,
        sources: [
          'ANSES 2024',
          'EFSA Guidelines',
          'INSERM Research',
          'REACH Database'
        ]
      },
      alternatives: alternatives,
      metadata: {
        processing_time_ms: Math.floor(Math.random() * 500) + 200,
        api_version: '1.0',
        request_id: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        timestamp: new Date().toISOString(),
        detection_method: 'keyword_analysis',
        user_context: context
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse multi-cat√©gorie:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur serveur lors de l\'analyse',
      message: error.message
    });
  }
});

// ===============================
// GET /api/multi-category/health
// ===============================
router.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'MultiCategory Analysis Service',
    version: '1.0',
    available_categories: categories.map(c => c.id),
    endpoints: [
      'GET /api/multi-category/categories',
      'POST /api/multi-category/analyze',
      'GET /api/multi-category/health'
    ],
    timestamp: new Date().toISOString()
  });
});

// ===============================
// FONCTIONS UTILITAIRES
// ===============================

/**
 * D√©tection automatique de cat√©gorie bas√©e sur mots-cl√©s
 */
function detectProductCategory(product) {
  const title = (product.title || '').toLowerCase();
  const description = (product.description || '').toLowerCase();
  const ingredients = (product.ingredients || []).join(' ').toLowerCase();
  
  const text = `${title} ${description} ${ingredients}`;

  // Mots-cl√©s alimentaires
  const foodKeywords = [
    'bio', 'c√©r√©ales', 'lait', 'yaourt', 'fromage', 'pain', 'biscuit',
    'chocolat', 'sucre', 'huile', 'vinaigre', 'confiture', 'miel',
    'l√©gume', 'fruit', 'viande', 'poisson', '≈ìuf', 'farine',
    'alimentaire', 'nutrition', 'calories', 'prot√©ines', 'glucides'
  ];

  // Mots-cl√©s cosm√©tiques
  const cosmeticKeywords = [
    'cr√®me', 'shampooing', 'gel', 'huile', 's√©rum', 'masque',
    'd√©maquillant', 'fond de teint', 'rouge', 'mascara', 'parfum',
    'd√©odorant', 'dentifrice', 'savon', 'lotion', 'baume',
    'cosm√©tique', 'beaut√©', 'soin', 'aqua', 'glycerin', 'paraben'
  ];

  // Mots-cl√©s d√©tergents
  const detergentKeywords = [
    'lessive', 'liquide vaisselle', 'nettoyant', 'd√©tergent',
    'produit m√©nager', 'd√©graissant', 'd√©sinfectant', 'javel',
    'tensioactif', 'phosphate', 'azurant', 'enzymatique',
    'm√©nager', 'nettoyage', 'entretien', 'surface'
  ];

  // Comptage des correspondances
  const foodScore = foodKeywords.filter(keyword => text.includes(keyword)).length;
  const cosmeticScore = cosmeticKeywords.filter(keyword => text.includes(keyword)).length;
  const detergentScore = detergentKeywords.filter(keyword => text.includes(keyword)).length;

  // D√©termination de la cat√©gorie
  if (foodScore >= cosmeticScore && foodScore >= detergentScore) {
    return 'food';
  } else if (cosmeticScore >= detergentScore) {
    return 'cosmetics';
  } else {
    return 'detergents';
  }
}

/**
 * Simulation d'analyse selon la cat√©gorie
 */
function performMockAnalysis(product, category) {
  // Scores diff√©rents selon la cat√©gorie
  const baseScores = {
    food: { min: 30, max: 80 },
    cosmetics: { min: 40, max: 85 },
    detergents: { min: 35, max: 75 }
  };

  const range = baseScores[category] || baseScores.food;
  const overall_score = Math.floor(Math.random() * (range.max - range.min + 1)) + range.min;
  
  // Ajustement selon des crit√®res simples
  let scoreAdjustment = 0;
  
  // Bonus si "bio" dans le titre
  if ((product.title || '').toLowerCase().includes('bio')) {
    scoreAdjustment += 10;
  }
  
  // P√©nalit√© si beaucoup d'ingr√©dients
  if (product.ingredients && product.ingredients.length > 10) {
    scoreAdjustment -= 5;
  }

  const final_score = Math.max(0, Math.min(100, overall_score + scoreAdjustment));

  return {
    overall_score: final_score,
    confidence: 0.75 + Math.random() * 0.2, // 0.75 √† 0.95
    detection_confidence: 0.8 + Math.random() * 0.15 // 0.8 √† 0.95
  };
}

/**
 * G√©n√©ration d'alternatives mock selon la cat√©gorie
 */
function generateMockAlternatives(category) {
  const alternatives = {
    food: [
      {
        name: 'Version maison naturelle',
        type: 'DIY',
        score: 85,
        description: 'Recette simple avec ingr√©dients naturels',
        why_better: 'Aucun additif, contr√¥le total des ingr√©dients'
      },
      {
        name: 'Alternative bio certifi√©e',
        type: 'Bio',
        score: 78,
        description: 'Produit √©quivalent avec certification bio',
        why_better: 'Sans pesticides ni additifs controvers√©s'
      }
    ],
    cosmetics: [
      {
        name: 'Cosm√©tique naturel certifi√©',
        type: 'Naturel',
        score: 82,
        description: 'Formule √† base d\'ingr√©dients naturels',
        why_better: 'Sans perturbateurs endocriniens ni parabens'
      },
      {
        name: 'Recette DIY simple',
        type: 'DIY',
        score: 88,
        description: 'Pr√©paration maison avec 3-4 ingr√©dients',
        why_better: '√âconomique et sans conservateurs'
      }
    ],
    detergents: [
      {
        name: 'Produit √©colabel europ√©en',
        type: '√âcolabel',
        score: 79,
        description: 'Certifi√© pour son faible impact environnemental',
        why_better: 'Biod√©gradable et moins toxique pour l\'eau'
      },
      {
        name: 'Solution maison bicarbonate',
        type: 'DIY',
        score: 90,
        description: 'M√©lange bicarbonate + vinaigre blanc',
        why_better: 'Efficace, √©conomique et 100% naturel'
      }
    ]
  };

  return alternatives[category] || alternatives.food;
}

module.exports = router;