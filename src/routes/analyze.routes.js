// üìù FICHIER COMPLET : src/routes/analyze.routes.js
// Avec int√©gration DetergentScorer

const { Router } = require('express');
const foodScorer = require('../scorers/food/foodScorer');
const CosmeticScorer = require('../scorers/cosmetic/cosmeticScorer');
const { DetergentScorer } = require('../scorers/detergent/detergentScorer'); // ‚ú® NOUVEAU

const router = Router();
const cosmeticScorer = new CosmeticScorer();
const detergentScorer = new DetergentScorer(); // ‚ú® NOUVEAU

/**
 * POST /analyze/food
 * Analyse compl√®te d'un produit avec IA + Scoring scientifique
 */
router.post('/food', async (req, res) => {
  try {
    const { productData, userProfile = {} } = req.body;

    if (!productData) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es produit manquantes'
      });
    }

    const scoringResult = await foodScorer.analyzeFood(productData, userProfile);

    // Filtrage si la confiance est trop basse pour affichage public
    if (scoringResult.confidence < 0.4) {
      return res.status(422).json({
        success: false,
        error: 'Donn√©es insuffisantes pour analyse fiable',
        confidence: scoringResult.confidence,
        message: 'Veuillez fournir plus d\'informations sur le produit'
      });
    }

    const response = {
      success: true,
      analysis: {
        score: scoringResult.score,
        grade: scoringResult.grade,
        confidence: scoringResult.confidence,
        confidence_label:
          foodScorer.confidenceCalculator.getInterpretation
            ? foodScorer.confidenceCalculator.getInterpretation(scoringResult.confidence)
            : scoringResult.confidence >= 0.8
            ? 'Tr√®s fiable'
            : scoringResult.confidence >= 0.6
            ? 'Fiable'
            : 'Mod√©r√©e',
        improvement: scoringResult.improvement,
        breakdown: scoringResult.breakdown,
        nova_classification: scoringResult.breakdown?.transformation?.details?.nova || {},
        additives_analysis: scoringResult.breakdown?.transformation?.details?.additives || {},
        recommendations: scoringResult.recommendations || {},
        alternatives: scoringResult.alternatives || [],
        insights: scoringResult.insights || [],
        chat_context: scoringResult.chat_context || null,
        differentiation: scoringResult.differentiation || {},
        sources: scoringResult.meta?.sources || [],
        meta: scoringResult.meta || {}
      },
      disclaimers: [
        "Information √©ducative - ne remplace pas avis m√©dical",
        "Bas√© sur donn√©es publiques sous licence ODbL",
        scoringResult.confidence < 0.6 ? "üö® Donn√©e estim√©e - fiabilit√© mod√©r√©e" : null
      ].filter(Boolean)
    };

    res.json(response);
  } catch (err) {
    console.error('[analyze.food] FATAL:', err);
    res.status(500).json({
      success: false,
      error: 'Erreur interne analyse',
      message: process.env.NODE_ENV === 'development' ? err.message : 'Erreur serveur'
    });
  }
});

/**
 * POST /analyze/cosmetic
 * Analyse compl√®te d'un produit cosm√©tique selon composition INCI
 */
router.post('/cosmetic', async (req, res) => {
  try {
    console.log('üß¥ Requ√™te analyse cosm√©tique re√ßue:', req.body);

    // Validation des donn√©es d'entr√©e
    const { product_name, ingredients, composition, inci, category, brand } = req.body;
    
    if (!ingredients && !composition && !inci) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es insuffisantes',
        message: 'Au moins un champ requis : ingredients, composition ou inci',
        required_fields: ['ingredients', 'composition', 'inci']
      });
    }

    // Pr√©paration des donn√©es produit
    const productData = {
      name: product_name,
      ingredients: ingredients || composition || inci,
      composition,
      inci,
      category: category || 'cosm√©tique',
      brand
    };

    console.log('üìã Donn√©es produit cosm√©tique pr√©par√©es:', productData);

    // Analyse avec le cosmeticScorer
    const analysisResult = await cosmeticScorer.analyzeCosmetic(productData);
    
    // V√©rification du seuil de confidence (comme pour food)
    if (analysisResult.confidence < 0.4) {
      console.warn('‚ö†Ô∏è Confidence cosm√©tique trop faible:', { 
        confidence: analysisResult.confidence,
        threshold: 0.4 
      });
      
      return res.status(422).json({
        success: false,
        error: 'Analyse non fiable',
        message: 'Les donn√©es fournies ne permettent pas une analyse suffisamment fiable',
        confidence: analysisResult.confidence,
        min_confidence_required: 0.4,
        suggestions: [
          'V√©rifiez la liste INCI compl√®te',
          'Assurez-vous que les ingr√©dients sont correctement orthographi√©s',
          'Fournissez plus d\'informations sur le produit'
        ]
      });
    }

    // G√©n√©ration des alternatives (fallback simple pour l'instant)
    try {
      analysisResult.alternatives = await generateCosmeticAlternatives(productData, analysisResult);
    } catch (altError) {
      console.warn('‚ö†Ô∏è Erreur g√©n√©ration alternatives cosm√©tique:', altError.message);
      analysisResult.alternatives = [];
      analysisResult.meta.fallback_alternatives = true;
    }

    // G√©n√©ration des insights √©ducatifs (fallback simple pour l'instant)
    try {
      analysisResult.insights = generateCosmeticInsights(analysisResult);
    } catch (insightError) {
      console.warn('‚ö†Ô∏è Erreur g√©n√©ration insights cosm√©tique:', insightError.message);
      analysisResult.insights = [];
      analysisResult.meta.fallback_insights = true;
    }

    // Ajout des disclaimers √©ducatifs
    const disclaimers = [
      "‚ÑπÔ∏è Analyse bas√©e sur la composition INCI et les bases scientifiques officielles (ANSM, EFSA, SCCS)",
      "‚ö†Ô∏è Les r√©actions cutan√©es sont individuelles. Test sur petite zone recommand√©",
      "üî¨ Ces informations sont √©ducatives et ne remplacent pas l'avis d'un dermatologue",
      "üìö Sources : Base INCI, Classification perturbateurs endocriniens ANSM 2024"
    ];

    // Log du succ√®s
    console.log('‚úÖ Analyse cosm√©tique r√©ussie:', {
      score: analysisResult.score,
      confidence: analysisResult.confidence,
      endocrine_disruptors: analysisResult.risk_analysis?.endocrine_disruptors?.length || 0,
      allergens: analysisResult.allergen_analysis?.total_allergens || 0,
      processing_time: analysisResult.meta?.processing_time_ms
    });

    // R√©ponse finale
    res.json({
      success: true,
      type: 'cosmetic',
      product: {
        name: productData.name,
        category: productData.category,
        brand: productData.brand
      },
      analysis: analysisResult,
      disclaimers,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse cosm√©tique:', {
      error: error.message,
      stack: error.stack,
      body: req.body
    });

    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: 'Impossible d\'analyser ce produit cosm√©tique',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * POST /analyze/cosmetic/dev
 * Route de d√©veloppement pour ignorer le seuil de confidence
 */
router.post('/cosmetic/dev', async (req, res) => {
  try {
    console.log('üß™ Requ√™te analyse cosm√©tique DEV (seuil ignor√©):', req.body);

    // Validation basique
    const { product_name, ingredients, composition, inci, category, brand } = req.body;
    
    if (!ingredients && !composition && !inci) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es insuffisantes',
        message: 'Au moins un champ requis : ingredients, composition ou inci'
      });
    }

    // Pr√©paration des donn√©es
    const productData = {
      name: product_name,
      ingredients: ingredients || composition || inci,
      composition,
      inci,
      category: category || 'cosm√©tique',
      brand
    };

    // Analyse SANS v√©rification de confidence
    const analysisResult = await cosmeticScorer.analyzeCosmetic(productData);
    
    // Ajout flag d√©veloppement
    analysisResult.meta.dev_mode = true;
    analysisResult.meta.confidence_threshold_ignored = true;

    // G√©n√©ration alternatives et insights (m√™me logique que route normale)
    try {
      analysisResult.alternatives = await generateCosmeticAlternatives(productData, analysisResult);
    } catch (altError) {
      analysisResult.alternatives = [];
      analysisResult.meta.fallback_alternatives = true;
    }

    try {
      analysisResult.insights = generateCosmeticInsights(analysisResult);
    } catch (insightError) {
      analysisResult.insights = [];
      analysisResult.meta.fallback_insights = true;
    }

    // Disclaimers sp√©cifiques d√©veloppement
    const disclaimers = [
      "üß™ MODE D√âVELOPPEMENT : Seuil de confidence ignor√© pour tests",
      "‚ÑπÔ∏è Analyse bas√©e sur la composition INCI et les bases scientifiques",
      "‚ö†Ô∏è R√©sultats √† interpr√©ter avec pr√©caution selon la confidence",
      "üìö Sources : ANSM, EFSA, SCCS, Base INCI 2024"
    ];

    console.log('‚úÖ Analyse cosm√©tique DEV r√©ussie:', {
      score: analysisResult.score,
      confidence: analysisResult.confidence,
      dev_mode: true
    });

    res.json({
      success: true,
      type: 'cosmetic_dev',
      product: productData,
      analysis: analysisResult,
      disclaimers,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse cosm√©tique DEV:', { error: error.message });
    
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: 'Impossible d\'analyser ce produit cosm√©tique (mode dev)',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// ===== ‚ú® NOUVELLES ROUTES D√âTERGENTS ===== 

/**
 * üßΩ POST /analyze/detergent
 * Analyse compl√®te d'un produit m√©nager/lessive selon REACH/ECHA 2024
 */
router.post('/detergent', async (req, res) => {
  try {
    console.log('üßΩ Requ√™te analyse d√©tergent re√ßue:', req.body);

    const { product_name, ingredients, composition, certifications, brand, category } = req.body;

    // Validation input
    if (!ingredients && !composition) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es insuffisantes',
        message: 'Au moins un champ requis : ingredients ou composition',
        required_fields: ['ingredients', 'composition'],
        expected_format: {
          ingredients: "string ou array d'ingr√©dients",
          product_name: "string (optionnel)", 
          certifications: "array (optionnel, ex: ['EU ECOLABEL', 'ECOCERT'])",
          category: "string (optionnel, ex: 'lessive', 'd√©tergent')",
          brand: "string (optionnel)"
        }
      });
    }

    // Pr√©paration des donn√©es produit
    const ingredientsList = ingredients || composition;
    const productName = product_name || '';
    const certificationsList = Array.isArray(certifications) ? certifications : 
                              typeof certifications === 'string' ? [certifications] : [];

    console.log('üìã Donn√©es d√©tergent pr√©par√©es:', {
      name: productName,
      ingredients_count: Array.isArray(ingredientsList) ? ingredientsList.length : ingredientsList.split(',').length,
      certifications: certificationsList,
      category: category || 'd√©tergent'
    });

    // Analyse avec le DetergentScorer
    const analysisResult = await detergentScorer.analyzeDetergent(
      ingredientsList,
      productName,
      certificationsList
    );

    // V√©rification seuil de confiance (coh√©rent avec autres endpoints)
    if (analysisResult.confidence < 0.4) {
      console.warn('‚ö†Ô∏è Confidence d√©tergent trop faible:', { 
        confidence: analysisResult.confidence,
        threshold: 0.4 
      });
      
      return res.status(422).json({
        success: false,
        error: 'Analyse non fiable',
        message: 'Les donn√©es fournies ne permettent pas une analyse suffisamment fiable',
        confidence: analysisResult.confidence,
        min_confidence_required: 0.4,
        suggestions: [
          'Fournir le nom complet du produit',
          'V√©rifier la liste compl√®te des ingr√©dients',
          'Inclure les certifications √©ventuelles',
          'S\'assurer de l\'orthographe des composants'
        ]
      });
    }

    // Enrichissement avec m√©tadonn√©es produit
    const enrichedAnalysis = {
      ...analysisResult,
      product_info: {
        name: productName,
        category: category || 'd√©tergent',
        brand: brand || null,
        certifications_declared: certificationsList
      },
      meta: {
        ...analysisResult.meta,
        processing_time_ms: Date.now(),
        analysis_version: 'detergent-v1.0',
        data_sources: ['REACH Database', 'ECHA 2024', 'EU Ecolabel', 'OECD Guidelines']
      }
    };

    // Disclaimers √©ducatifs sp√©cifiques d√©tergents
    const disclaimers = [
      "‚ÑπÔ∏è Analyse bas√©e sur la r√©glementation REACH et les bases ECHA 2024",
      "üåä Impact environnemental √©valu√© selon crit√®res EU Ecolabel et Nordic Swan", 
      "‚ö†Ô∏è Les sensibilit√©s cutan√©es sont individuelles. Test pr√©alable recommand√©",
      "üî¨ Ces informations sont √©ducatives et ne remplacent pas l'avis de professionnels",
      "üìö Sources : REACH, ECHA, OECD, SCCS, √©tudes biod√©gradabilit√© 2024"
    ];

    console.log('‚úÖ Analyse d√©tergent r√©ussie:', {
      score: analysisResult.score,
      confidence: analysisResult.confidence,
      issues_detected: analysisResult.detected_issues?.length || 0,
      certifications_found: analysisResult.certifications_detected?.length || 0,
      alternatives_count: analysisResult.alternatives?.length || 0
    });

    // R√©ponse structur√©e
    res.json({
      success: true,
      type: 'detergent',
      product: {
        name: productName,
        category: category || 'd√©tergent',
        brand: brand || null
      },
      analysis: enrichedAnalysis,
      disclaimers,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse d√©tergent:', {
      error: error.message,
      stack: error.stack,
      body: req.body
    });

    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: 'Impossible d\'analyser ce produit d√©tergent',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üßΩ POST /analyze/detergent/dev
 * Version d√©veloppement - ignore seuil de confiance
 */
router.post('/detergent/dev', async (req, res) => {
  try {
    console.log('üß™ Requ√™te analyse d√©tergent DEV (seuil ignor√©):', req.body);

    const { product_name, ingredients, composition, certifications, brand, category } = req.body;

    if (!ingredients && !composition) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es insuffisantes pour analyse d√©tergent',
        message: 'Au moins un champ requis : ingredients ou composition',
        example: {
          ingredients: "AQUA, SODIUM LAURYL SULFATE, SODIUM TRIPOLYPHOSPHATE, PARFUM",
          product_name: "Lessive Multi-Usage",
          certifications: ["EU ECOLABEL"],
          category: "lessive"
        }
      });
    }

    // Pr√©paration des donn√©es
    const ingredientsList = ingredients || composition;
    const productName = product_name || 'Produit Test DEV';
    const certificationsList = Array.isArray(certifications) ? certifications : 
                              typeof certifications === 'string' ? [certifications] : [];

    console.log('üìã Donn√©es d√©tergent DEV pr√©par√©es:', {
      name: productName,
      ingredients: ingredientsList,
      certifications: certificationsList
    });

    // Analyse SANS v√©rification de confidence
    const analysisResult = await detergentScorer.analyzeDetergent(
      ingredientsList,
      productName,
      certificationsList
    );
    
    // Ajout flags d√©veloppement
    const devAnalysis = {
      ...analysisResult,
      meta: {
        ...analysisResult.meta,
        dev_mode: true,
        confidence_threshold_ignored: true,
        analysis_timestamp: new Date().toISOString(),
        debug_info: {
          original_ingredients: ingredientsList,
          processed_ingredients: analysisResult.processed_ingredients || null,
          confidence_details: `${analysisResult.confidence} (seuil 0.4 ignor√©)`
        }
      }
    };

    // Disclaimers sp√©cifiques d√©veloppement
    const disclaimers = [
      "üß™ MODE D√âVELOPPEMENT : Seuil de confidence ignor√© pour tests",
      "‚ÑπÔ∏è Analyse bas√©e sur REACH/ECHA - R√©sultats √† interpr√©ter selon confidence",
      "‚ö†Ô∏è Version test - Validation recommand√©e avec route production",
      "üìö Sources : REACH Database, ECHA 2024, EU Ecolabel criteria"
    ];

    console.log('‚úÖ Analyse d√©tergent DEV r√©ussie:', {
      score: analysisResult.score,
      confidence: analysisResult.confidence,
      dev_mode: true,
      confidence_ignored: true
    });

    res.json({
      success: true,
      type: 'detergent_dev',
      product: {
        name: productName,
        category: category || 'd√©tergent',
        brand: brand || null
      },
      analysis: devAnalysis,
      disclaimers,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå Erreur analyse d√©tergent DEV:', { 
      error: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
    
    res.status(500).json({
      success: false,
      error: 'Erreur interne du serveur',
      message: 'Impossible d\'analyser ce produit d√©tergent (mode dev)',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

/**
 * üìö GET /analyze/detergent/docs
 * Documentation API d√©tergents
 */
router.get('/detergent/docs', (req, res) => {
  res.json({
    title: 'üßΩ ECOLOJIA - API Analyse D√©tergents & Produits M√©nagers',
    version: '1.0',
    description: 'Analyse scientifique des produits m√©nagers selon r√©glementation REACH et crit√®res ECHA 2024',
    
    endpoints: {
      'POST /api/analyze/detergent': {
        description: 'Analyse compl√®te avec seuil de confiance (production)',
        required: ['ingredients ou composition'],
        optional: ['product_name', 'certifications', 'category', 'brand'],
        response: 'Score + alternatives + insights scientifiques',
        confidence_threshold: 0.4
      },
      'POST /api/analyze/detergent/dev': {
        description: 'Mode d√©veloppement - ignore seuil confiance',
        required: ['ingredients ou composition'],
        response: 'Analyse compl√®te + m√©tadonn√©es debug',
        confidence_threshold: 'ignor√©'
      },
      'GET /api/analyze/detergent/docs': {
        description: 'Documentation compl√®te API d√©tergents'
      }
    },

    scoring_criteria: {
      ecotoxicity: {
        weight: '30%',
        description: 'Toxicit√© aquatique selon bases ECHA',
        sources: ['REACH Database', 'ECHA C&L Inventory', 'OECD Guidelines']
      },
      biodegradability: {
        weight: '25%', 
        description: 'Tests biod√©gradation OECD 301',
        sources: ['EU Ecolabel criteria', 'Nordic Swan standards']
      },
      irritation: {
        weight: '25%',
        description: 'Allerg√®nes et irritants cutan√©s',
        sources: ['SCCS opinions', 'Cosmetic Regulation EC']
      },
      environmental: {
        weight: '20%',
        description: 'Impact global + certifications',
        sources: ['Life Cycle Assessment', 'Ecolabel criteria']
      }
    },

    harmful_ingredients_detected: {
      'high_penalty': [
        'SODIUM TRIPOLYPHOSPHATE (-40 pts) - Eutrophisation',
        'DICHLOROMETHANE (-50 pts) - Canc√©rig√®ne suspect√©',
        'METHYLISOTHIAZOLINONE (-35 pts) - Allerg√®ne s√©v√®re',
        'ALKYLBENZENE SULFONATE (-30 pts) - Non biod√©gradable'
      ],
      'medium_penalty': [
        'SODIUM LAURYL SULFATE (-25 pts) - Irritant s√©v√®re',
        'BENZISOTHIAZOLINONE (-20 pts) - Allerg√®ne',
        'TETRASODIUM PYROPHOSPHATE (-20 pts) - Eutrophisation'
      ]
    },

    eco_ingredients_bonus: [
      'COCO GLUCOSIDE (+15 pts) - Tensioactif v√©g√©tal',
      'SODIUM BICARBONATE (+20 pts) - Agent naturel s√ªr',
      'SODIUM PERCARBONATE (+18 pts) - Blanchiment oxyg√©n√©',
      'CITRIC ACID (+15 pts) - Acidifiant naturel',
      'PROTEASE (+10 pts) - Enzyme biod√©gradable'
    ],

    certifications_supported: {
      'EU ECOLABEL': '+20 pts - Label officiel europ√©en',
      'NORDIC SWAN': '+18 pts - Label nordique strict',  
      'ECOCERT': '+15 pts - Certification bio fran√ßaise',
      'CRADLE TO CRADLE': '+25 pts - √âconomie circulaire',
      'NATURE ET PROGRES': '+12 pts - Standard bio exigeant'
    },

    example_requests: {
      basic: {
        ingredients: "AQUA, COCO GLUCOSIDE, SODIUM BICARBONATE, CITRIC ACID",
        product_name: "Lessive √âcologique"
      },
      with_certifications: {
        ingredients: "AQUA, LAURYL GLUCOSIDE, SODIUM PERCARBONATE, PROTEASE, PARFUM",
        product_name: "D√©tergent Multi-Surface Bio",
        certifications: ["EU ECOLABEL", "ECOCERT"],
        category: "nettoyant multi-surfaces",
        brand: "Marque Verte"
      },
      problematic: {
        ingredients: "AQUA, SODIUM LAURYL SULFATE, SODIUM TRIPOLYPHOSPHATE, METHYLISOTHIAZOLINONE, BHA",
        product_name: "Lessive Conventionnelle"
      }
    },

    response_structure: {
      success: 'boolean',
      type: 'detergent',
      product: {
        name: 'string',
        category: 'string', 
        brand: 'string'
      },
      analysis: {
        score: 'number (0-100)',
        confidence: 'number (0-1)',
        breakdown: {
          ecotoxicity: 'object - Score + p√©nalit√©s toxicit√©',
          biodegradability: 'object - Ratio biod√©gradable + analyse',
          irritation: 'object - Allerg√®nes + irritants',
          environmental: 'object - Impact + certifications'
        },
        detected_issues: 'array - Probl√®mes critiques d√©tect√©s',
        certifications_detected: 'array - Labels trouv√©s',
        alternatives: 'array - Suggestions plus √©cologiques',
        insights: 'array - √âducation scientifique',
        methodology: 'string - Sources utilis√©es'
      }
    },

    scientific_sources: [
      'REACH Database (Registration, Evaluation, Authorisation of Chemicals)',
      'ECHA 2024 (European Chemicals Agency)',
      'EU Ecolabel criteria for detergents',
      'OECD Guidelines for biodegradability testing',
      'SCCS (Scientific Committee on Consumer Safety)',
      'Nordic Swan Ecolabelling criteria',
      'Water Framework Directive 2000/60/EC'
    ],

    analysis_methodology: 'Scoring holistique bas√© sur r√©glementation REACH, crit√®res EU Ecolabel, et √©tudes r√©centes biod√©gradabilit√©/√©cotoxicit√© (2024)'
  });
});

/**
 * GET /analyze/cosmetic/docs
 * Documentation API cosm√©tique
 */
router.get('/cosmetic/docs', (req, res) => {
  res.json({
    endpoint: '/api/analyze/cosmetic',
    method: 'POST',
    description: 'Analyse scientifique des produits cosm√©tiques bas√©e sur la composition INCI',
    
    required_fields: {
      one_of: ['ingredients', 'composition', 'inci']
    },
    
    optional_fields: {
      product_name: 'string - Nom du produit',
      category: 'string - Cat√©gorie (cr√®me, shampoing, etc.)',
      brand: 'string - Marque du produit'
    },
    
    response_structure: {
      success: 'boolean',
      type: 'cosmetic',
      product: {
        name: 'string',
        category: 'string',
        brand: 'string'
      },
      analysis: {
        score: 'number (0-100)',
        confidence: 'number (0-1)',
        confidence_label: 'string',
        breakdown: {
          safety: 'object - S√©curit√© (perturbateurs, toxicit√©)',
          efficacy: 'object - Efficacit√© (ingr√©dients actifs)',
          allergens: 'object - Allerg√®nes d√©tect√©s',
          formulation: 'object - Qualit√© formulation'
        },
        risk_analysis: 'object - Perturbateurs endocriniens, toxicit√©',
        benefit_analysis: 'object - Ingr√©dients b√©n√©fiques',
        allergen_analysis: 'object - Allerg√®nes et sensibilisation',
        alternatives: 'array - Suggestions alternatives',
        insights: 'array - Insights √©ducatifs',
        meta: 'object - M√©tadonn√©es techniques'
      }
    },
    
    confidence_threshold: 0.4,
    
    example_request: {
      product_name: "Cr√®me Hydratante Visage",
      ingredients: "AQUA, GLYCERIN, CETYL ALCOHOL, DIMETHICONE, BUTYLPARABEN, LIMONENE",
      category: "soin visage",
      brand: "Example Brand"
    },
    
    data_sources: [
      "Base INCI internationale",
      "ANSM (Agence Nationale S√©curit√© M√©dicament)",
      "EFSA (European Food Safety Authority)",
      "SCCS (Scientific Committee Consumer Safety)",
      "REVIDAL (Base allerg√®nes dermatologie)"
    ],
    
    analysis_criteria: {
      safety: "D√©tection perturbateurs endocriniens, ingr√©dients toxiques",
      efficacy: "Ingr√©dients actifs √† efficacit√© prouv√©e",
      allergens: "Allerg√®nes contact selon pr√©valence",
      formulation: "Complexit√©, ratio naturel/synth√©tique"
    }
  });
});

/**
 * GET /analyze/health
 * V√©rifie √©tat du service
 */
router.get('/health', (req, res) => {
  res.json({
    success: true,
    service: 'ECOLOJIA Scoring Engine',
    version: '3.0-sprint3-complete', // ‚ú® UPDATED
    features: {
      food: ['NOVA', 'EFSA', 'NutriScore', 'IG', 'Alternatives IA', 'Insights IA', 'Chat IA'],
      cosmetic: ['INCI Analysis', 'Endocrine Disruptors', 'Allergens', 'Benefit Evaluation'],
      detergent: ['REACH Analysis', 'Ecotoxicity', 'Biodegradability', 'EU Ecolabel'] // ‚ú® NEW
    },
    endpoints: [
      'POST /analyze/food',
      'POST /analyze/cosmetic',
      'POST /analyze/cosmetic/dev',
      'GET /analyze/cosmetic/docs',
      'POST /analyze/detergent', // ‚ú® NEW
      'POST /analyze/detergent/dev', // ‚ú® NEW
      'GET /analyze/detergent/docs' // ‚ú® NEW
    ],
    status: 'operational',
    coverage: 'Alimentaire + Cosm√©tique + D√©tergent = Solution compl√®te ECOLOJIA' // ‚ú® NEW
  });
});

// ===== FONCTIONS HELPER =====

/**
 * G√©n√®re des alternatives cosm√©tiques basiques (fallback)
 */
async function generateCosmeticAlternatives(productData, analysisResult) {
  const alternatives = [];
  
  // Alternatives bas√©es sur les probl√®mes d√©tect√©s
  if (analysisResult.risk_analysis?.endocrine_disruptors?.length > 0) {
    alternatives.push({
      type: 'Marque clean beauty',
      reason: 'Sans perturbateurs endocriniens',
      examples: ['Weleda', 'Dr. Hauschka', 'Melvita'],
      benefit: 'R√©duction risque hormonal'
    });
  }

  if (analysisResult.allergen_analysis?.total_allergens > 2) {
    alternatives.push({
      type: 'Formule hypoallerg√©nique',
      reason: 'Moins d\'allerg√®nes d√©tect√©s',
      examples: ['Av√®ne', 'La Roche-Posay', 'Eucerin'],
      benefit: 'Meilleure tol√©rance cutan√©e'
    });
  }

  if (analysisResult.breakdown?.formulation?.details?.natural_ratio < 30) {
    alternatives.push({
      type: 'Cosm√©tiques bio/naturels',
      reason: 'Plus d\'ingr√©dients naturels',
      examples: ['Cattier', 'Logona', 'Lavera'],
      benefit: 'Formulation plus respectueuse'
    });
  }

  // Alternative DIY si pertinent
  const productType = detectProductType(productData);
  if (productType === 'soin' || productType === 'nettoyant') {
    alternatives.push({
      type: 'Recette maison',
      reason: 'Contr√¥le total des ingr√©dients',
      examples: ['Huile de jojoba + aloe vera', 'Savon de Marseille pur'],
      benefit: '√âconomique et personnalisable'
    });
  }

  return alternatives;
}

/**
 * G√©n√®re des insights √©ducatifs cosm√©tiques basiques (fallback)
 */
function generateCosmeticInsights(analysisResult) {
  const insights = [];
  
  if (analysisResult.risk_analysis?.endocrine_disruptors?.length > 0) {
    insights.push("üí° Perturbateurs endocriniens : Ce produit contient des ingr√©dients pouvant affecter le syst√®me hormonal (Source : ANSM 2024)");
  }
  
  if (analysisResult.allergen_analysis?.total_allergens > 2) {
    insights.push("üí° Allerg√®nes multiples : Risque de r√©action cutan√©e √©lev√©, test pr√©alable recommand√© (Source : REVIDAL 2024)");
  }
  
  if (analysisResult.benefit_analysis?.active_ingredients?.length > 0) {
    insights.push("üí° Ingr√©dients actifs : Pr√©sence de compos√©s √† efficacit√© d√©montr√©e scientifiquement (Source : SCCS 2024)");
  }
  
  if (insights.length === 0) {
    insights.push("üí° Formulation standard : Composition classique sans particularit√©s notables (Source : Base INCI)");
  }
  
  return insights.slice(0, 3); // Maximum 3 insights
}

/**
 * D√©tection du type de produit cosm√©tique
 */
function detectProductType(productData) {
  const name = (productData.name || '').toLowerCase();
  const category = (productData.category || '').toLowerCase();
  
  if (name.includes('cr√®me') || name.includes('lait') || category.includes('soin')) {
    return 'soin';
  } else if (name.includes('shampoo') || name.includes('gel') || category.includes('nettoyant')) {
    return 'nettoyant';
  } else if (name.includes('maquillage') || category.includes('makeup')) {
    return 'maquillage';
  } else {
    return 'autre';
  }
}

module.exports = router;