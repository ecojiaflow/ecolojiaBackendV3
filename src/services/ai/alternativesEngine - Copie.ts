// PATH: backend/src/services/ai/alternativesEngine.ts
import { Logger } from '../../utils/Logger';

const log = new Logger('AlternativesEngine');
const debug = (...a: unknown[]) => process.env.NODE_ENV !== 'production' && log.info(...a);

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Types ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export interface AlternativeRequest {
  productName: string;
  category: 'food' | 'cosmetics' | 'detergents';
  currentScore: number;
}

export interface Alternative {
  name: string;
  score: number;
  reasons: string[];
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Base de donn√©es compacte ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
const ALT_DB = {
  food: {
    'soda': [
      { n: 'Eau p√©tillante + citron', s: 95, r: ['Sans sucre', 'Naturel', 'Hydratant'] },
      { n: 'Kombucha maison', s: 85, r: ['Probiotiques', 'Peu sucr√©', 'Ferment√©'] },
      { n: 'Th√© glac√© maison', s: 90, r: ['Antioxydants', 'Contr√¥le sucre', 'Naturel'] }
    ],
    'chips': [
      { n: 'Chips l√©gumes maison', s: 80, r: ['Sans additifs', 'Fibres', 'Vitamines'] },
      { n: 'Noix grill√©es', s: 85, r: ['Prot√©ines', 'Bon gras', 'Min√©raux'] },
      { n: 'Popcorn nature', s: 75, r: ['Fibres', 'Peu calorique', 'Simple'] }
    ],
    'biscuit': [
      { n: 'Biscuits avoine maison', s: 85, r: ['Fibres', 'Sans additifs', 'Personnalisable'] },
      { n: 'Fruits secs', s: 90, r: ['Naturel', 'Nutriments', 'Sans sucre ajout√©'] },
      { n: 'Barres c√©r√©ales maison', s: 80, r: ['Contr√¥le ingr√©dients', '√ânergie', 'Sain'] }
    ],
    'default': [
      { n: 'Version bio', s: 70, r: ['Sans pesticides', 'Meilleure qualit√©'] },
      { n: 'Version maison', s: 85, r: ['Sans additifs', 'Frais', '√âconomique'] },
      { n: 'Alternative locale', s: 75, r: ['Circuit court', 'Frais', '√âcologique'] }
    ]
  },
  cosmetics: {
    'cr√®me': [
      { n: 'Huile v√©g√©tale pure', s: 90, r: ['100% naturel', 'Multi-usage', 'Sans conservateurs'] },
      { n: 'Beurre de karit√©', s: 85, r: ['Naturel', 'Nourrissant', 'Simple'] },
      { n: 'Aloe vera gel', s: 88, r: ['Apaisant', 'Naturel', 'Hydratant'] }
    ],
    'shampoing': [
      { n: 'Shampoing solide', s: 85, r: ['Sans plastique', 'Concentr√©', 'Naturel'] },
      { n: 'No-poo (bicarbonate)', s: 75, r: ['Z√©ro d√©chet', '√âconomique', 'Simple'] },
      { n: 'Rhassoul', s: 80, r: ['Argile naturelle', 'Purifiant', 'Traditionnel'] }
    ],
    'default': [
      { n: 'Version bio certifi√©e', s: 80, r: ['Sans chimiques', 'Contr√¥l√©', 'Respectueux'] },
      { n: 'DIY maison', s: 85, r: ['Personnalis√©', '√âconomique', 'Sans conservateurs'] },
      { n: 'Marque minimaliste', s: 75, r: ['Peu d\'ingr√©dients', 'Transparent', 'Efficace'] }
    ]
  },
  detergents: {
    'lessive': [
      { n: 'Savon de Marseille', s: 90, r: ['Naturel', 'Biod√©gradable', '√âconomique'] },
      { n: 'Noix de lavage', s: 85, r: ['100% v√©g√©tal', 'Compostable', 'Hypoallerg√©nique'] },
      { n: 'Lessive maison', s: 88, r: ['Contr√¥le total', '√âconomique', '√âcologique'] }
    ],
    'nettoyant': [
      { n: 'Vinaigre blanc', s: 95, r: ['Multi-usage', 'D√©sinfectant', '√âconomique'] },
      { n: 'Bicarbonate', s: 92, r: ['D√©graissant', 'D√©sodorisant', 'Non toxique'] },
      { n: 'Savon noir', s: 88, r: ['Traditionnel', 'Efficace', 'Biod√©gradable'] }
    ],
    'default': [
      { n: 'Version √©colabel', s: 80, r: ['Certifi√©', 'Test√©', 'Performant'] },
      { n: 'Recette maison', s: 85, r: ['Simple', '√âconomique', 'Personnalis√©'] },
      { n: 'Concentr√© √©cologique', s: 75, r: ['Moins d\'emballage', 'Efficace', 'Durable'] }
    ]
  }
};

const DIY = {
  'nettoyant': '50% vinaigre + 50% eau + citron',
  'lessive': 'Savon r√¢p√© + bicarbonate + cristaux soude',
  'dentifrice': 'Bicarbonate + huile coco + menthe',
  'cr√®me': 'Beurre karit√© + huile + vitamine E',
  'masque': 'Argile + eau florale + huile',
  'shampoing': 'Savon noir + huiles essentielles'
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Moteur d'alternatives ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
export class AlternativesEngine {
  async generate(req: AlternativeRequest): Promise<Alternative[]> {
    debug(`G√©n√©ration alternatives pour ${req.productName}`);
    
    // D√©tection type produit
    const type = this.detectType(req.productName.toLowerCase());
    
    // R√©cup√©ration alternatives
    const alts = ALT_DB[req.category]?.[type] || ALT_DB[req.category]?.default || [];
    
    // Tri par score et ajout contexte
    return alts
      .map(a => ({
        name: a.n,
        score: a.s,
        reasons: [
          ...a.r,
          req.currentScore < 50 ? 'üîÑ Meilleure alternative' : '‚úÖ Option valide'
        ]
      }))
      .sort((a, b) => b.score - a.score)
      .slice(0, 3);
  }
  
  getDIYRecipe(product: string): string {
    const key = Object.keys(DIY).find(k => product.toLowerCase().includes(k));
    return DIY[key as keyof typeof DIY] || 'Recette non disponible';
  }
  
  private detectType(name: string): string {
    // Food
    if (/soda|cola|boisson/i.test(name)) return 'soda';
    if (/chips|crisps|frites/i.test(name)) return 'chips';
    if (/biscuit|cookie|g√¢teau/i.test(name)) return 'biscuit';
    // Cosmetics
    if (/cr√®me|lotion|moisturizer/i.test(name)) return 'cr√®me';
    if (/shamp|cheveux/i.test(name)) return 'shampoing';
    // Detergents
    if (/lessive|detergent|lavage/i.test(name)) return 'lessive';
    if (/nettoyant|clean|spray/i.test(name)) return 'nettoyant';
    
    return 'default';
  }
}

export const alternativesEngine = new AlternativesEngine();