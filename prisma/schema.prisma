// backend/prisma/schema.prisma
// ================================
// CONFIGURATION PRISMA COMPLÈTE
// ================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// MODÈLES EXISTANTS (PRODUITS)
// ================================

model Product {
  id               String           @id @default(uuid())
  title            String
  description      String           @default("")
  slug             String           @unique
  brand            String?
  category         String?          @default("générique")
  tags             String[]         @default([])
  images           String[]         @default([])
  zones_dispo      String[]         @default([])
  prices           Json?
  affiliate_url    String?
  eco_score        Decimal?         @db.Decimal(3, 2)
  ai_confidence    Decimal?         @db.Decimal(3, 2)
  confidence_pct   Int?
  confidence_color ConfidenceColor? @default(yellow)
  verified_status  VerifiedStatus   @default(manual_review)
  resume_fr        String?          @default("")
  resume_en        String?          @default("")
  enriched_at      DateTime?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  image_url        String?
  barcode          String?          @unique
  
  // Relations
  partnerLinks     PartnerLink[]
  analyses         ProductAnalysis[]

  @@map("products")
}

model Region {
  id         String   @id @default(uuid())
  code       String   @unique
  name       String
  currency   String
  language   String
  timezone   String
  tax_rate   Decimal? @db.Decimal(5, 4)
  active     Boolean  @default(true)
  created_at DateTime @default(now())

  @@map("regions")
}

model Partner {
  id              String        @id @default(uuid())
  name            String
  website         String?
  commission_rate Decimal       @default(0.05) @db.Decimal(5, 4)
  ethical_score   Decimal       @default(3.0) @db.Decimal(3, 2)
  active          Boolean       @default(true)
  created_at      DateTime      @default(now())
  links           PartnerLink[]

  @@map("partners")
}

model PartnerLink {
  id              String   @id @default(uuid())
  product_id      String
  partner_id      String
  url             String
  tracking_id     String?
  commission_rate Decimal  @default(0.05) @db.Decimal(5, 4)
  clicks          Int      @default(0)
  active          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  partner         Partner  @relation(fields: [partner_id], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([product_id, partner_id])
  @@map("partner_links")
}

// ================================
// NOUVEAUX MODÈLES (AUTHENTIFICATION)
// ================================

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  passwordHash       String   @map("password_hash")
  name               String
  tier               UserTier @default(free)
  emailVerified      Boolean  @default(false) @map("email_verified")
  stripeCustomerId   String?  @map("stripe_customer_id")
  
  // Timestamps
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  lastLoginAt        DateTime? @map("last_login_at")
  
  // JSON fields pour flexibilité
  preferences        Json?    @default("{}")
  quotas             Json?    @default("{}")
  currentUsage       Json?    @default("{}")
  stats              Json?    @default("{}")
  
  // Relations
  emailVerifications EmailVerification[]
  sessions           UserSession[]
  analyses           ProductAnalysis[]
  
  @@map("users")
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  email     String
  token     String   @unique
  verified  Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relation optionnelle vers User
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model UserSession {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  token        String   @unique
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  isActive     Boolean  @default(true) @map("is_active")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")
  
  // Relation vers User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model ProductAnalysis {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  productId   String   @map("product_id")
  category    String
  healthScore Int      @map("health_score")
  scanMethod  String   @map("scan_method") // 'barcode', 'manual', 'photo'
  analysisData Json    @map("analysis_data")
  scannedAt   DateTime @default(now()) @map("scanned_at")
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_analyses")
}

// ================================
// ENUMS
// ================================

enum ConfidenceColor {
  green
  yellow
  red
  orange
}

enum VerifiedStatus {
  verified
  manual_review
  rejected
  ai_analyzed
}

enum UserTier {
  free
  premium
}